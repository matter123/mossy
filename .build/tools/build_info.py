#!/usr/bin/env python
# Copyright 2014 Matthew Fosdick

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import os.path as path
import time
import datetime
import getpass
import subprocess
import tools.build_name_gen as build_name_gen
import hashlib
import fractions


def combine(path1, path2):
    return path.normpath(path.join(path1, path2))


def gen(srcfolder):
    build_info = combine(srcfolder, "./sysroot/usr/include/build_info.h")
    build_numbert = combine(srcfolder, "./.build/build_number")
    try:
        bn = open(build_numbert, "r")
        build_number = bn.read().split(" ")
        if int(build_number[0]) == int(datetime.date.today().toordinal()):
            build_number = int(build_number[1]) + 1
            bn.close()
        else:
            build_number = 1
    except:
        build_number = 1
        try:
            bn.close()
        except:
            pass
    bn = open(build_numbert, "w")
    bn.write(str(datetime.date.today().toordinal()) + " " + str(build_number))
    bn.close()

    bi = open(build_info, "w")
    bi.write(
        "/*temp file full of build info, " +
        "generated by tools/gen_build_info.py.")
    bi.write(
        "\nContents in this file are not " +
        "copyrighted material unless obtained\n")
    bi.write("from a copyrighted source*/\n")
    bi.write("#pragma once\n")
    bi.write("#define BUILD_UNIX_TIME ")
    bi.write(str(int(time.time())) + "L\n")
    bi.write("#define BUILD_NUMBER ")
    bi.write(str(int(build_number)) + "L\n")
    bi.write("#define BUILD_DATE ")
    bi.write(str(int(datetime.date.today().toordinal())) + "L\n")
    bi.write("#define BUILD_USERNAME \"")
    bi.write(str(getpass.getuser()) + "\"\n")
    bi.write("#define BUILD_GIT_BRANCH \"")
    out = subprocess.Popen(
        ["git", "status", "-sb"], stdout=subprocess.PIPE).communicate()[0]\
            .decode('unicode_escape')
    bi.write(out.splitlines()[0].split(" ")[1].split("...")[0] + "\"\n")
    salt = None
    if len(out.splitlines()) is 1:
        # branch is clean use git commit for hash
        git_hash = subprocess.Popen(
            ["git", "rev-parse", "HEAD"],
            stdout=subprocess.PIPE).communicate()[0].decode("utf-8")[:-1]
        print(git_hash)
        salt = (build_name_gen.get_cation(git_hash),
                build_name_gen.get_anion(git_hash))
    else:
        time_hash = hashlib.sha1(str(time.time()).encode('UTF-8')).hexdigest()
        print(time_hash)
        salt = (build_name_gen.get_cation(time_hash),
                build_name_gen.get_anion(time_hash))
    paren = [False, False]
    subscript = "₀ ₂₃₄₅₆₇₈₉"
    for sub in subscript:
        if sub in salt[0][1]:
            paren[0] = True
        if sub in salt[1][1]:
            paren[1] = True
    if sum(1 for c in salt[0][1] if c.isupper()) is not 1:
        paren[0] = True
    if sum(1 for c in salt[1][1] if c.isupper()) is not 1:
        paren[1] = True
    name = salt[0][0] + " " + salt[1][0]
    formula_parts = [salt[0][1], salt[1][1], salt[1][2], salt[0][2]]
    if paren[0]:
        formula_parts[0] = "(" + formula_parts[0] + ")"
    if paren[1]:
        formula_parts[1] = "(" + formula_parts[1] + ")"
    formula_parts[2] = formula_parts[2]//fractions.gcd(formula_parts[2],
                                                       formula_parts[3])
    formula_parts[3] = formula_parts[3]//fractions.gcd(formula_parts[2],
                                                       formula_parts[3])
    formula = ''.join([f for f in (formula_parts[0] +
                       subscript[formula_parts[2]] +
                       formula_parts[1] +
                       subscript[formula_parts[3]]) if not f == ' '])
    bi.write("#define BUILD_NAME \"")
    bi.write(name + "\"\n")
    bi.write("#define BUILD_FORMULA \"")
    bi.write(formula + "\"\n")
    bi.write("#define BUILD_FULL_NAME \"")
    bi.write(name + " (" + formula + ")\"\n")
    bi.close()


def delete(srcfolder):
    build_info = combine(srcfolder, "./sysroot/usr/include/build_info.h")
    os.remove(build_info)
