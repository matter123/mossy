CSOURCES=$(shell find -name *.c -not -path "./crt")
COBJECTS=$(patsubst %.c, %.o, $(CSOURCES))
CPPSOURCES=$(shell find -name *.cpp -not -path "./crt")
CPPOBJECTS=$(patsubst %.cpp, %.o, $(CPPSOURCES))
SSOURCES=$(shell find -name *.s)
SOBJECTS=$(patsubst %.s, %.o, $(SSOURCES))


CC=$$HOME/opt/cross/bin/i586-elf-gcc
CPP=$$HOME/opt/cross/bin/i586-elf-gcc
LD=$$HOME/opt/cross/bin/i586-elf-gcc
AS=$$HOME/opt/cross/bin/i586-elf-as
#CPP=clang

CRTBEGIN_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtbegin.o)
CRTEND_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtend.o)

all: build runem

build: clean check $(COBJECTS) $(CPPOBJECTS) $(SOBJECTS) globalc link mkiso


WFLAGSON=-Wall -Wextra -Werror=return-type -Wshadow -Wundef -Wframe-larger-than=16384 -Wdeprecated -Wredundant-decls -pedantic
WFLAGSOFF=-Wno-sequence-point -Wno-unused-parameter -Wno-sign-compare
FFLAGS=-fno-omit-frame-pointer -ffreestanding -fno-rtti -fno-exceptions -fno-stack-protector
DFLAGS=-DARCH=_x86 -DVENDOR=_IBM -DDEBUG
IFLAGS=-Isrc/stdlib/include -Isrc/hal -Isrc/arch -Isrc/vendor
CFLAGS=-O2 -std=c99 $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(IFLAGS)
CPPFLAGS=-O2 -std=c++11 $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(IFLAGS)
LDFLAGS=-Tlinkx86.ld -z max-page-size=0x1000 -ffreestanding -O2 -nostdlib $(FFLAGS)
ASFLAGS=-felf


clean:
	@echo Cleaning workspace
	@find . -name '*.o' -delete
	@rm -f kernel

check:
	#@tools/doccheck.py kernel src
link:
	@echo Linking
	@$(LD) $(LDFLAGS) -o kernel ./gc/crti.o $(CRTBEGIN_OBJ) $(SOBJECTS) $(COBJECTS) $(CPPOBJECTS) $(CRTEND_OBJ) ./gc/crtn.o -lgcc

.s.o:
	@echo Assembling $(patsubst %.o, %.s, $@)
	@cpp $(CPPFLAGS) -E -P -o $(patsubst %.o, %.cpps, $@) $(patsubst %.o, %.s, $@)
	@nasm $(ASFLAGS) $(patsubst %.o, %.cpps, $@) -o $@
	@rm $(patsubst %.o, %.cpps, $@)

.c.o:
	@echo Compiling $<
	@$(CC) $(CFLAGS) -o $@ -c $<

.cpp.o:
	@echo Compiling $<
	@$(CPP) $(CPPFLAGS) -o $@ -c $<

mkiso:
	#@tools/packrd.py
	#@tools/symexport.py kernel
	@cp -f kernel iso/kernel
	@cp -f kernel.sym iso/kernel.sym
	#@cp -f initrd.rd iso/initrd.rd

runem:
	@~/bochs-2.6.2/bochs -f bochs.rc -q
	#@cd .&& bash scripts/run_emulator64 `pwd` &

globalc:
	@echo assembling help files
	@$(AS) ./gc/crti.asm -o ./gc/crti.o
	@$(AS) ./gc/crtn.asm -o ./gc/crtn.o