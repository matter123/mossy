CSOURCES:=$(shell find src -name *.c)
COBJECTS:=$(patsubst %.c, %.o, $(CSOURCES))
CXXSOURCES:=$(shell find src -name *.cpp)
CXXOBJECTS:=$(patsubst %.cpp, %.o, $(CXXSOURCES))
SSOURCES:=$(shell find src -name *.s)
SOBJECTS:=$(patsubst %.s, %.o, $(SSOURCES))

export
ARCH=64
VENDOR=PC
OBJ_SUFFIX:=$(ARCH)_$(VENDOR)
ClangXX=clang++ --target=x86_64-elf -Wdocumentation
Clang=clang --target=x86_64-elf -Wdocumentation
CC:=$(Clang)
CXX:=$(ClangXX)

all: build runem

build: clean check $(COBJECTS) $(CXXOBJECTS) $(SOBJECTS) build_libs link mkiso

FFLAGS=-fno-omit-frame-pointer -ffreestanding -fno-stack-protector -fno-common
DFLAGS:=$(DFLAGS) -DARCH=_x64 -DVENDOR=_PC -DDEBUG
MFLAGS=-mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow
CFLAGS=-O3 -std=c99 $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(MFLAGS) $(IFLAGS)
CXXFLAGS=-O0 -std=c++1y $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(MFLAGS) $(IFLAGS) -fno-rtti \
-fno-exceptions -fdiagnostics-color=auto
LDFLAGS=-static -Tlinkx64.ld -ffreestanding -O2 -nostdlib $(FFLAGS) -Llibs -z max-page-size=0x1000
ASFLAGS=-felf64


clean:
	@echo Cleaning workspace
	@find . -name '*.o' -delete
	@rm -f kernel$(ARCH)

check:
	#@tools/doccheck.py kernel src
link:
	@echo Linking
	@g++ $(LDFLAGS) -o kernel$(OBJ_SUFFIX) $(SOBJECTS) $(COBJECTS) $(CXXOBJECTS) -lc$(OBJ_SUFFIX)\
	 -lencode$(OBJ_SUFFIX) -lacpi$(OBJ_SUFFIX) -lgcc

.s.o:
	@echo Assembling $(patsubst %.o, %.s, $@)
	@cpp $(DFLAGS)  $(IFLAGS) -DASM -E -P -o $(patsubst %.o, %.cpps, $@) $(patsubst %.o, %.s, $@)
	@nasm $(ASFLAGS) $(patsubst %.o, %.cpps, $@) -o $@
	@rm $(patsubst %.o, %.cpps, $@)

.c.o:
	@echo Compiling $<
	@$(Clang) $(CFLAGS) -o $@ -c $<

.cpp.o:
	@echo Compiling $<
	@$(ClangXX) $(CXXFLAGS) -o $@ -c $<

mkiso:
	#@tools/packrd.py
	#@tools/symexport.py kernel$(OBJ_SUFFIX)
	@cp -f kernel$(OBJ_SUFFIX) iso/kernel$(OBJ_SUFFIX)
	@cp -f kernel$(OBJ_SUFFIX).sym iso/kernel$(OBJ_SUFFIX).sym
	#@cp -f initrd.rd iso/initrd.rd

runem:
	@~/bochs-2.6.2/bochs -f bochs.rc -q
	#@cd .&& bash scripts/run_emulator64 `pwd` &

build_libs:
	cd libs/clib && $(MAKE) build
	cd libs/encode && $(MAKE) build
	cd libs/acpi && $(MAKE) build
