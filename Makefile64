CSOURCES=$(shell find -name *.c -not -path "./crt")
COBJECTS=$(patsubst %.c, %.o, $(CSOURCES))
CPPSOURCES=$(shell find -name *.cpp -not -path "./crt")
CPPOBJECTS=$(patsubst %.cpp, %.o, $(CPPSOURCES))
SSOURCES=$(shell find -name *.s)
SOBJECTS=$(patsubst %.s, %.o, $(SSOURCES))


CC=$$HOME/opt/cross/bin/x86_64-elf-gcc
CPP=$$HOME/opt/cross/bin/x86_64-elf-gcc
LD=$$HOME/opt/cross/bin/x86_64-elf-gcc
AS=$$HOME/opt/cross/bin/x86_64-elf-as


CRTBEGIN_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtbegin.o)
CRTEND_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtend.o)

all: build test

build: clean check globalc $(COBJECTS)  $(SOBJECTS) link

test: mkiso runem


WFLAGSON=-Wall -Wextra -Werror=return-type -Wshadow -Wframe-larger-than=16384 -Wdeprecated -Wredundant-decls -pedantic
WFLAGSOFF=-Wno-sequence-point -Wno-unused-parameter -Wno-sign-compare
FFLAGS=-fno-omit-frame-pointer -ffreestanding -fno-rtti -fno-exceptions -fno-stack-protector
DFLAGS=-DARCH=x64
MFLAGS=-mcmodel=large -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow
CFLAGS=-Isrc/stdlib/include -O2 -std=c99 $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(MFLAGS)
CPPFLAGS=-Isrc/stdlib/include -O2 -std=c++11 $(DFLAGS) $(WFLAGSON) $(WFLAGSOFF) $(FFLAGS) $(MFLAGS)
LDFLAGS=-Tlinkx64.ld -ffreestanding -O2 -nostdlib -lgcc $(FFLAGS)
ASFLAGS=-felf64

clean:
	@echo Cleaning workspace
	@find . -name '*.o' -delete
	@rm -f kernel

check:
	@tools/doccheck.py kernel src
link:
	@echo Linking
	@$(LD) $(LDFLAGS) -o kernel ./gc/crti.o $(SOBJECTS) $(COBJECTS) ./gc/crtn.o

.s.o:
	@echo Assembling $(patsubst %.o, %.s, $@)
	@cpp -E -P $(DFLAGS) -o temp.s $(patsubst %.o, %.s, $@)
	@nasm $(ASFLAGS) temp.s -o $@
	@rm temp.s

.c.o:
	@echo Compiling $<
	@$(CC) $(CFLAGS) -o $@ -c $<

.cpp.o:
	@echo Compiling $<
	@$(CPP) $(CPPFLAGS) -o $@ -c $<

mkiso:
	#@tools/packrd.py
	#@tools/symexport.py kernel
	@cp -f kernel iso/kernel
	@cp -f kernel.sym iso/kernel.sym
	#@cp -f initrd.rd iso/initrd.rd
	@grub2-mkrescue -o bootable.iso iso -- -zisofs level=6

runem:
	@cd .&& bash scripts/run_emulator64 `pwd` &

globalc:
	@echo assembling help files
	$(AS) ./gc/crtix64.asm -o ./gc/crti.o
	$(AS) ./gc/crtnx64.asm -o ./gc/crtn.o
